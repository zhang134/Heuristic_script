# Obtain the heuristic clustering results from sim matrix generated by lzw. By Ze-Gang Wei.

import os,sys,getopt
import numpy as np
import pandas as pd
#from scipy.spatial.distance import squareform
#from scipy.cluster.hierarchy import linkage
#from scipy.cluster.hierarchy import fcluster

if __name__ == "__main__":
        usage = """

usage: python lzw_for_heuristic_clustering.py -i sim.txt -s sorted_seqs.fa -o lzw90.clstr -c 0.9


Example: python lzw_for_heuristic_clustering.py -i sim.txt -s sorted_seqs.fa -o lzw90.clstr -c 0.9

--input/-i      (required) The dis file by mash.
--sort/-s	(required) The sorted sequences file.
--cutoff/-c	(required) The similarity cutoff.
--out/-o        (required) The output file.
--help/-h       Help

"""
	opts,arg=getopt.getopt(sys.argv[1:],"i:o:s:c:h:",['input=', 'out=', 'sort=', 'cutoff=', 'help='],)
	parameters=[a[0] for a in opts]
	if '-h' in parameters or '--help' in parameters:
		print usage
                sys.exit(1)
        if len(parameters)==0:
                print usage
                sys.exit(1)
        if '-i' not in parameters and '--input' not in parameters:
                print "***Error, a input file is requred.***\n"
                print usage
                sys.exit(1)
	if '-o' not in parameters and '--output' not in parameters:
		print "***Error, the output directory is requred.***\n"
		print uasge
		sys.exit(1)
	if '-c' not in parameters and '--cutoff' not in parameters:
                print "***Error, the clustering similarity cutoff is requred.***\n"
                print uasge
                sys.exit(1)
	if '-s' not in parameters and '--sort' not in parameters:
                print "***Error, the sorted sequence file is requred.***\n"
                print uasge
                sys.exit(1)
        for i,a in opts:
		if i in ("--input","-i"):
                        if not os.path.exists(a):
                                print "***%s path not found.***"%(a)
                                print usage
                                sys.exit(1)
                        sim_file = a
		if i in ("--sort", "-s"):
			sorted_file = a
		if i in ("--out", '-o'):
			out_file = a
		if i in ("--cutoff", '-c'):
                        cutoff = float(a)

	df = pd.read_csv(sim_file, sep='\t')
	array0 = df.values[0::,1::]
	arr     = array0.astype("float")
	heads_arr = list(df.columns)
	heads = heads_arr[1:]
	seq_n = len(heads)
	print "Sequences number: ", seq_n
	sorted_heads = []
	sorted_seqs = []
	n = 0
	seq = ''
	ss = open(sorted_file)
	ll = ss.readline().strip()
	while ll:
		if ll.startswith('>'):
			sorted_heads.append(ll[1:])
			n += 1
			if n >= 2:
				sorted_seqs.append(seq)
				seq = ''
		else:
			seq += ll
		ll = ss.readline().strip()
	sorted_seqs.append(seq)
	ss.close()
	clusters = []
	seeds = []
	seq_label = {}
	seeds.append(sorted_heads[0])
	seq_label[sorted_heads[0]] = []
	seq_label[sorted_heads[0]].append(sorted_heads[0])
	pp = 1
	for h in sorted_heads[1:]:
		id_query = heads.index(h)
		clustered = 0
		pp += 1
		for s in seeds:
			id_seed = heads.index(s)
			if arr[id_query][id_seed] >= cutoff:
				seq_label[s].append(h)
				clustered = 1
				break
		if clustered == 0:
			seeds.append(h)
			seq_label[h] = []
			seq_label[h].append(h)
		sys.stdout.write("Cluster number: %d, processing the %d -th sequences   \r" % (len(seeds), pp))
                sys.stdout.flush()
	qq = open(out_file + '.seeds', 'w')
	for q in seeds:
		iid = sorted_heads.index(q)
		qq.write('>' + q + '\n')
		qq.write(sorted_seqs[iid] + '\n')
	qq.close()
	oo = open(out_file, 'w')
	n_cc = 0
	for ss,cc in seq_label.items():
		oo.write('>Cluster ' + str(n_cc) + '\n')
		n_member = 0
		n_cc += 1
                for ii in cc:
			index1 = heads.index(cc[0])
			index2 = heads.index(ii)
			sim    = arr[index1][index2] * 100.00
			idddd = sorted_heads.index(ii)
			lenn  = len(sorted_seqs[idddd])
			if n_member == 0:
				oo.write(str(n_member) + '\t' + str(lenn) + 'aa, >' + ii + '... *\n')
			else:
				oo.write(str(n_member) + '\t' + str(lenn) + 'aa, >' + ii + '... at ' + str(sim) + '%\n')
			n_member += 1

        oo.close()
	print "\nClusters number: ", n_cc

